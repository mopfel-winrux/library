# dump apr 6

=store -build-file %/sur/graph-store/hoon
=gra -build-file %/lib/graph-store/hoon
=pinboard -build-file %/lib/pinboard/hoon

:graph-store|add-pin [our %pinboard-1] 2 our 'eta' 'bta' [12 24]

=upd (add-pin-update:pinboard [[our %pinboard-1] 2 our now 'eta' 'bta' [12 24]])
;;  (map index:store node:store)  +>.q.upd

*item:orm:gra
(gas:orm:gra *graph:store ~[[0 *node:store] [1 *node:store]])
=.  fakegraph  (gas:orm:gra *graph:store [(item:orm:gra) ~])  fakegraph

----------------------------------------------
working scries
.^(noun %gx /=graph-store=/node-exists/~zod/pinboard-1/1/noun)

:: todo why tf do i have to resort to limb/wing/lark syntax? i.e. why cant i do p.q.r.s type stuff?
=xa ;;(update:store .^(noun %gx /=graph-store=/node/~zod/pinboard-1/1/noun))
=xb ;;((map index:store node:store) +>.q.xa)
=xc `node:store`->.xb


=a .^(noun %gx /=graph-store=/graph/~zod/pinboard-1/noun)
=a ;;(update:store a)
=b q.a
=c +>-.b
=d ;;(graph:store c)
`(list (pair atom node:store))`(tap:orm:gra d)
(add-pin-update:pinboard [[our %pinboard-1] 1 our now 'title' 'text' [x=0 y=0]])


# Old Text Dump

---

create a group
```
-group-create [%create %my-pins [%open *(set rank:title) *(set ship)] 'pin group' 'group desc']
```

create the graph. (note the rid (here, [our %some-date-time1]) must be unique to all of graph stored, not just unique within the group. this is why they tend to be datetimes. (if two people create a graph at the exact same time with this then one's will prob fail lmao))

```
-graph-create [%create [our %some-date-time1] 'pinboard with fake chat module' 'desc' `%graph-validator-pinboard [%group [our %my-pins2]] 'chat']
```


add a sample pin to the graph. syntax: @ top level index, title of the pin
```
:graph-store|add-pin [our %some-date-time1] 1 'dumb pin'
```

handy inspections
- `:graph-store +dbug`
- `:group-store +dbug`


todo use this later:  ````@tas`(scot %date now)``` in place of some date time

------------

if you want a stack trace for your validator to see where it is failing,
manually build the file instead, like so `=f -build-file %/mar/graph/validator/pinboard/hoon`

then call `noun:grab:f` on an indexed-post that you want to use for a test case.

ex: `(noun:grab:f [a=1 p=[author=our ~[1 %meta 1] now ~[[%text '-1'] [%text '1080']] [~ ~] ~]])`
recall that an indexed-post is an `[a=atom p=post]`, and a post is a
`[author=ship =index time-sent=time contents=(list content) hash=(unit hash) =signatures`

in the above example, we simply omit the hash and signatures

---------------------


```
:graph-store|remove-nodes [our %some-date-time1] (sy ~[~[4 %meta]])  :: not so fun: deletes a structural node
:graph-store|remove-nodes [our %some-date-time1] (sy ~[~[1] ~[2]])   :: deletes certain pins
:graph-store|remove-graph [our %some-date-time1]                     :: deletes the whole graph
```


-----------------

-pinboard-edit-pin-metadata [[our %some-date-time1] 1 [222 222]]

=store -build-file %/sur/graph-store/hoon
=pinboard -build-file %/lib/pinboard/hoon

=a ;;(update:store .^(noun %gx /=graph-store=/node/~zod/some-date-time1/1/noun))
----------



Future Exercises?

- add a reactions node that readers can do, limited to only emojis and a single character
- change color of post (extend the metadata nodes)

----------------


