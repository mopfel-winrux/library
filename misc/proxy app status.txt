# proxy app status

works = implemented + tested

- scries
	- [%x %libraries ~] works
	- [%x %books @ ~] works

- commands
	- %create-library works
	- %remove-library works
	- %add-book works
	- %remove-book works
	- %request-book works
	- %revise-book poke to revise book metadata does not yet exist

- actions
	- %add-comment works
	- %remove-comment works
	- %get-book works
	- %get-libraries works
	- %get-books works

- on-agent
	- handle-graph-update-incoming works
	- handle-graph-update-outgoing works*
		- %add-nodes works
		- %remove-graph works
		- the following need testing, but are deprioritized
	    	+ %add-signatures
			+ %remove-signatures
			+ %add-tag
			+ %remove-tag
      

- on-watch
	- basic subscription works
	- policy enforcement logic works


nice to haves

* code (only after mvp + documentation released)
	- allow revising the metadata of a book
	- give back the title and/or isbn of the book as well, rather than simply the book's indicies.
	- the printf response for %get-books and %get-libraries is fine as a user interface for a proof of concept displaying the backend. however, if the goal is for this to be easily frontend-able, then there is still a non-trivial gap for the data to get across to the web in a structured manner i think. i need to revisit airlock to see if we can easily get access to poke data, or rather what's the best way to do this.
	- do cleanup refactor pass (redundant code, using agentio, getting a code review)

* docs
	- a short reference document
	- CURLified versions of each command for use with airlocks (if it would even work)


--------

may 29

- broadcasting graph updates seem to work!! this was the last major roadblock
- scries only work locally!??
	- remote scrying doesn't exist
	- make %request-libraries poke, which responds with a poke back %libraries or smtn which is the result of /x/libraries
	- make %request-books poke, which server responds back with scry /x/books/@

- still need to forward rest of the updates (implemented, needs testing)
- still need to test out other policies
- will just test locally to make sure code works for a 3rd ship, but not necessary to document
- (side question) how do i manually close a subscription from dojo? %leave?
	- answer: debug poke that runs a %leave

---

jun 5

- most of the tests run and pass
- need to fix handling readers
	- move state handling to first part of :_, just have another switch/if statement, modify state there,
	- refactor repetative stuff out into |^ arms.

- need to fix breaking changes to graph store validators
- need to do final testing, esp. of update forwarding for non-%add-nodes

---

jun 9

- all test cases seem to work
- sending a remove graph update seems to net 2 remove graph store updates on receiving end? not a deal-breaker but eh
- sending stuff like %add/remove-signatures needs to be tested eventually, but not a deal breaker.

---

jun 10


todo
- filter the %get-libraries scry based on policy, so as not to leak libraries you're not supposed to know about
- test out requesting your own library and book, and do something, see if it causes a loop. currently this is not asserted against
- test out state removal properly working across multiple resources (works for a single one)

nice to haves (will only do if time budget allows)

- sending stuff like %add/remove-signatures needs to be tested eventually, but not a deal breaker. we can skip this until someone complains lol
- allow revising the metadata of a book. forgot about this lol.
- give back the title and/or isbn of the book as well, rather than simply the book's indicies.



------------
june 15

did
- refactored out is-allowed
- filtered the %get-libraries scry based on policy

---
june 16

did
- code (all untested as of now)
	* added assertion against %get-ing your own library and book
	* refactor owner check logic to is-owner arm
	* refactor out comment removal checking logic to arm in barket
	* allow owner to see all books
	* create arm index-to-path
	* fixed subscription logic

skipped
	* test out state removal properly working across multiple resources (works for a single one). yeah it doesn't really matter cause i guarded against it anyways

---------
june 18

done
- ran thru test cases
- proper resubscribe logic works


- documentation
	* hands on usage doc
		+ flesh out remaining example statements
		+ add in expected outputs

skipped
- documentation
	* code reference. (not strictly necessary, might do eventually)
		+ list of all types, and their meaning/usage. (i.e. readers, prim, policies)
		+ list of all pokes (actions, commands, poke-backs)
		+ list of all lib functions and what they do


---
june 20


done

- code
	* all major refactoring before code review


todo


- code
	* bug! %remove-graph isn't sent on deletion of library. likely a problem with sending out cards


- documentation
	* hands on usage doc
		+ add links to relevant bits of code (?)
		+ (optional, get input) show curl commands to access app in an airlock fashion

	* code architecture explainer
		+ outline (potentially revisit the old documentation and replicate structure if appropriate)
			- intro: what is the desired use cases of the library app
			- project structure: briefly show and explain project file structure (don't forget, ted/ and gen/ are deprecated)
			- data:
				* schema explanation
				* validator logic explanation, briefly
			- access: 
				* explain implicit permissioning system (i.e. when you have access to a book, you automatically have access to commenting. deliberate choice, not required to be this way)
				* explain policies
			- state: explain the state that the app holds and what its used for
			- networking architecture:
				* explain core design decisions: every host of library is themselves responsible for sending out data to relevant people, receivers only trust host's update.
				* show the flow of incoming/outgoing traffic. diagram would be nice here
					+ ~zod, host of ~zod/library1 issues %add-comment to proxy, proxy sends graph store update to local graph store, proxy receives the same update, sends it out to all others. same flow as if any other person did an %add-comment, it is broadcast.
				* (maybe) show full data flow in short bulleted form. %get-libraries -> %get-library resource -> %get-book resource book -> %add-comment
				* (maybe) explain how poke-back pattern is used to surface data to the end user.
			- emphasize: this is just one architecture that you could follow, you can really do anything you want.



---------------
june 19

done

skipped

todo
- links in usage doc to src code!
- do all minor refactoring as much as possible before review
- [low-priority] potentially move towards treating moons as the same as planets


notes
- separation of code and docs: on urbit official docs, realize that code will not be hosted there, it'll have to be linked externally

tim tip:
if you want to only have certain ~| to print only on certain subexpressions,
limit the scope of the sigbar by an if statement rather than having it wrap the whole rest of the code ~|  ?> is not the best
?:  a
   ~|("oops" b)
c



