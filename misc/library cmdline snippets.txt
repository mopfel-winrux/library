|mount %
|commit %home

=library -build-file %/sur/library/hoon
=store -build-file %/sur/graph-store/hoon
=libstore -build-file %/lib/graph-store/hoon
=libgraph -build-file %/lib/graph/hoon
=liblibrary -build-file %/lib/library/hoon



-build-file %/app/library-proxy/hoon
|start %library-proxy

:: ~zod and moon ota setup
|ota ~zod %kids
|merge %kids our %home


:: handy state inspections
:graph-store +dbug [%state 'graphs']
:library-proxy +dbug


:: appetizers of all commands
::  TODO Create proper appetizer section/document that is easier to read that test cases

:library-proxy &library-command [%create-library [our %library1] [%open ~]]
:library-proxy &library-command [%remove-library [our %library1]]

:library-proxy &library-command [%add-book [our %library1] ["Dune" "isbnisbnis"]]  :: isbn must be length 10 or 13
:library-proxy &library-command [%remove-book [our %library1] 123.456]


:library-proxy &library-action [%add-comment [our %library1] 123.456 "this is a comment."]
:library-proxy &library-action [%add-comment [our %library1] ~[123.456 8.319.395.793.566.789.475 789.654]]

=libraries .^((set resource:store) %gx /(scot %p our)/library-proxy/(scot %da now)/libraries/noun)
=available-books .^((set atom) %gx /(scot %p our)/library-proxy/(scot %da now)/books/library1/noun)



==========================================


:: ~zod creates a library called %library1
:library-proxy &library-command [%create-library [our %library1] [%open ~]]

:: ~zod adds two books adding a book
:library-proxy &library-command [%add-book [our %library1] ["Dune" "isbnisbnis"]]
:library-proxy &library-command [%add-book [our %library1] ["ABC" "isbnisbnis123"]]

::: replace with the top level index fragment of the book titled "Dune"
=top-of-dune 170.141.184.505.085.304.029.083.925.866.675.699.712

:: ~zod adds comment on book "Dune"
:library-proxy &library-action [%add-comment [our %library1] top-of-dune "I love dune"]

:: ~nus issues poke %get-libraries for libraries available on ~zod
:~zod/library-proxy &library-action [%get-libraries ~]

:: ~nus issues poke %get-books for books available on ~zod/library1
:~zod/library-proxy &library-action [%get-books [~zod %library1]]

:: ~nus tries to add a book, fails because isn't in readers yet
:~zod/library-proxy &library-command [%add-book [~zod %library1] ["fake book" "isbnisbnis"]]

:: ~nus tries to add comment on book, fails cause not part of readers
:~zod/library-proxy &library-action [%add-comment [~zod %library1] top-of-dune "failing comment"]

:: ~nus issues %request-library poke to start recieving updates to %library1
:library-proxy &library-command [%request-library [~zod %library1]]

:: ~nus issues %request-library poke to start recieving updates %library1
:library-proxy &library-command [%request-book [~zod %library1] top-of-dune]

:: ~nus tries to add comment again, is successful
:~zod/library-proxy &library-action [%add-comment [~zod %library1] top-of-dune "dune is ok"]

:: ~nus adds a second comment again, is successful
:~zod/library-proxy &library-action [%add-comment [~zod %library1] top-of-dune "in my opinion"]

:: ~nus deletes own comment, succeeds
:~zod/library-proxy &library-action [%remove-comment [~zod %library1] ~[top-of-dune %comments <index-frag of comment by ~nus>]]

:: ~zod deletes nus's comment, succeeds
:library-proxy &library-action [%remove-comment [our %library1] ~[top-of-dune %comments <index-frag of other comment by ~nus>]]

:: ~nus tries to delete ~zod's comment, fails
:~zod/library-proxy &library-action [%remove-comment [~zod %library1] ~[top-of-dune %comments <index-frag of comment by ~zod>]]

:: ~nus tries to delete ~zod's book, fails
:~zod/library-proxy &library-command [%remove-book [~zod %library1] top-of-dune]

:: ~nus tries to delete ~zod's library, fails
:~zod/library-proxy &library-command [%remove-library [~zod %library1]]

:: ~zod deletes book with title "Dune", succeeds. appropriate state in proxy is cleared
:library-proxy &library-command [%remove-book [our %library1] top-of-dune]

:: ~zod deletes the library, succeeds
:library-proxy &library-command [%remove-library [our %library1]]


:: testing out policies

:library-proxy &library-command [%create-library [our %children-only] [%children ~]]
:library-proxy &library-command [%create-library [our %frens-only] [%whitelist (silt ~[~nus ~sun])]]


:: ~nus tries to join %children-only, fails (tested)
:library-proxy &library-command [%request-library [~zod %children-only]]

:: ~sampel-palnet-dozzod-dozzod, moon of ~zod, tries to join %children-only, succeeds
:library-proxy &library-command [%request-library [~zod %children-only]]

:::

:: ~sampel-palnet-dozzod-dozzod, moon of ~zod, tries to join %frens-only, fails
:library-proxy &library-command [%request-library [~zod %frens-only]]

:: ~nus and sun try to join %frens-only, succeed (tested)
:library-proxy &library-command [%request-library [~zod %frens-only]]


